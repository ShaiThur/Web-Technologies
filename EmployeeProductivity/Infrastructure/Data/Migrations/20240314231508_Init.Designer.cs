// <auto-generated />
using System;
using Domain.Enums;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240314231508_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "complexity", new[] { "easy", "normal", "difficult" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MainInfo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Complexity?>("Complexity")
                        .HasColumnType("complexity");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DirectorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("JobResultId")
                        .HasColumnType("uuid");

                    b.Property<string>("MainInfo")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobResultId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.JobResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TextResult")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobResults");
                });

            modelBuilder.Entity("Domain.Entities.StatisticsOfEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("StatisticsOfEmployees");
                });

            modelBuilder.Entity("Domain.Entities.Users.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Domain.Entities.Users.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("Domain.Entities.Users.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DirectorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("StatisticsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("StatisticsId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.HasOne("Domain.Entities.Users.Director", "Director")
                        .WithMany("Jobs")
                        .HasForeignKey("DirectorId");

                    b.HasOne("Domain.Entities.Users.Employee", "Employee")
                        .WithMany("Jobs")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Domain.Entities.JobResult", "JobResult")
                        .WithMany()
                        .HasForeignKey("JobResultId");

                    b.Navigation("Director");

                    b.Navigation("Employee");

                    b.Navigation("JobResult");
                });

            modelBuilder.Entity("Domain.Entities.StatisticsOfEmployee", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.DeliveryTimeInfo", "DeliveryTimeInfo", b1 =>
                        {
                            b1.Property<Guid>("StatisticsOfEmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("DifficultJobsDeliveryTimeInfo")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("EasyJobsDeliveryTimeInfo")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("NormalJobsDeliveryTimeInfo")
                                .HasColumnType("numeric");

                            b1.HasKey("StatisticsOfEmployeeId");

                            b1.ToTable("StatisticsOfEmployees");

                            b1.WithOwner()
                                .HasForeignKey("StatisticsOfEmployeeId");
                        });

                    b.OwnsOne("Domain.ValueObjects.JobsComplexityKeeper", "JobsComplexity", b1 =>
                        {
                            b1.Property<Guid>("StatisticsOfEmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<int>("DifficultJobsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("EasyJobsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("NormalJobsCount")
                                .HasColumnType("integer");

                            b1.HasKey("StatisticsOfEmployeeId");

                            b1.ToTable("StatisticsOfEmployees");

                            b1.WithOwner()
                                .HasForeignKey("StatisticsOfEmployeeId");
                        });

                    b.Navigation("DeliveryTimeInfo");

                    b.Navigation("JobsComplexity");
                });

            modelBuilder.Entity("Domain.Entities.Users.Admin", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("AdminId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .HasColumnType("text");

                            b1.HasKey("AdminId");

                            b1.ToTable("Admins");

                            b1.WithOwner()
                                .HasForeignKey("AdminId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Password", "PasswordHash", b1 =>
                        {
                            b1.Property<Guid>("AdminId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Hash")
                                .HasColumnType("text");

                            b1.HasKey("AdminId");

                            b1.ToTable("Admins");

                            b1.WithOwner()
                                .HasForeignKey("AdminId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("PasswordHash")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Users.Director", b =>
                {
                    b.HasOne("Domain.Entities.Users.Admin", null)
                        .WithMany("Directors")
                        .HasForeignKey("AdminId");

                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.OwnsOne("Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("DirectorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .HasColumnType("text");

                            b1.HasKey("DirectorId");

                            b1.ToTable("Directors");

                            b1.WithOwner()
                                .HasForeignKey("DirectorId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Password", "PasswordHash", b1 =>
                        {
                            b1.Property<Guid>("DirectorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Hash")
                                .HasColumnType("text");

                            b1.HasKey("DirectorId");

                            b1.ToTable("Directors");

                            b1.WithOwner()
                                .HasForeignKey("DirectorId");
                        });

                    b.Navigation("Company");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("PasswordHash")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Users.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Users.Admin", null)
                        .WithMany("Employees")
                        .HasForeignKey("AdminId");

                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.Users.Director", "Director")
                        .WithMany("Employees")
                        .HasForeignKey("DirectorId");

                    b.HasOne("Domain.Entities.StatisticsOfEmployee", "Statistics")
                        .WithOne("Employee")
                        .HasForeignKey("Domain.Entities.Users.Employee", "StatisticsId");

                    b.OwnsOne("Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .HasColumnType("text");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Password", "PasswordHash", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Hash")
                                .HasColumnType("text");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Company");

                    b.Navigation("Director");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("PasswordHash")
                        .IsRequired();

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("Domain.Entities.StatisticsOfEmployee", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.Users.Admin", b =>
                {
                    b.Navigation("Directors");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domain.Entities.Users.Director", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.Users.Employee", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
